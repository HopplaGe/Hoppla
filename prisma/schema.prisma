// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("$DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum userRole {
  ADMIN
  USER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  role          userRole     @default(USER)
  address       String?
  phone         String?
  birthdate     DateTime?
  gender        Gender       @default(OTHER)
  accounts      Account[]
  sessions      Session[]
  Car           Car[]
  Ride          Ride[]
  Trip          Trip?        @relation(fields: [tripId], references: [id])
  tripId        String?
  Rating        UserRating[] @relation("rating")
  Rated         UserRating[] @relation("rated")
  ownedCompany  Company[]    @relation("owner")
  workCompany   Company[]    @relation("driver")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @default(now()) @map("updated_at")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model UserRating {
  id        String   @id @default(cuid())
  rating    Float    @default(0)
  comment   String?
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "rated")
  authorId  String   @map("author_id")
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade, name: "rating")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("userratings")
}

// Cars model
model Car {
  id          String   @id @default(cuid())
  brand       String
  model       String
  year        Int
  color       String
  plateNumber String   @map("plate_number")
  ownerId     String?  @map("owner_id")
  owner       User?    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  companyId   String?  @map("company_id")
  Company     Company? @relation(fields: [companyId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  @@map("cars")
}

// Rides Model
model Ride {
  id        String     @id @default(cuid())
  from      String     @map("start_location")
  to        String     @map("end_location")
  distance  Float
  duration  Int
  seats     Int
  price     Float
  startDate DateTime   @map("start_date")
  startTime String     @map("start_time")
  driverId  String     @map("driver_id")
  driver    User       @relation(fields: [driverId], references: [id], onDelete: Cascade)
  // stops       Stop[]
  carId     String?    @map("car_id")
  rideRules RideRule[]
  status    RideStatus @default(PENDING)
  tripId    String?    @unique
  trip      Trip?
  companyId String?    @map("company_id")
  createdAt DateTime   @default(now()) @map("created_at")

  @@map("rides")
}

enum RideStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELED
  COMPLETED
}

model Trip {
  id         String   @id @default(cuid())
  rideId     String   @unique @map("ride_id")
  ride       Ride     @relation(fields: [rideId], references: [id], onDelete: Cascade)
  passangers User[]
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map("trips")
}

// Regions and Populated Areas Model

model Country {
  id        String   @id @default(cuid())
  name      String
  code      String
  phoneCode String   @map("phone_code")
  currency  String   @map("currency_code")
  flag      String?
  regions   Region[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("countries")
}

model Region {
  id             String          @id @default(cuid())
  name           String
  countryId      String          @map("country_id")
  country        Country         @relation(fields: [countryId], references: [id], onDelete: Cascade)
  svgCoords      String          @map("svg_coords")
  isOccupied     Boolean         @default(false) @map("is_occupied")
  populatedAreas PopulatedArea[]
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @default(now()) @map("updated_at")

  @@map("regions")
}

model PopulatedArea {
  id         String              @id @default(cuid())
  name       String
  lat        Float
  lng        Float
  symbol     String?
  status     PopulatedAreaStatus @default(CITY)
  isCapital  Boolean             @default(false) @map("is_capital")
  postalCode String?             @map("postal_code")
  population Int?
  regionId   String              @map("region_id")
  region     Region?             @relation(fields: [regionId], references: [id], onDelete: Cascade)
  svgCoords  String?             @default("0") @map("svg_coords")
  createdAt  DateTime            @default(now()) @map("created_at")
  updatedAt  DateTime            @default(now()) @map("updated_at")

  @@map("populatedareas")
}

enum PopulatedAreaStatus {
  CITY
  TOWNSHIP
  VILLAGE
}

// Urgent information model
model UrgentInfo {
  id        String   @id @default(cuid())
  title     String
  content   String
  color     String?  @default("red")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("urgentinfo")
}

// Ride Rules Model
model Rule {
  id          String     @id @default(cuid())
  name        String
  description String?
  rides       RideRule[]
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @default(now()) @map("updated_at")

  @@map("rules")
}

model RideRule {
  id        String   @id @default(cuid())
  rideId    String   @map("ride_id")
  ride      Ride     @relation(fields: [rideId], references: [id], onDelete: Cascade)
  ruleId    String   @map("rule_id")
  rule      Rule     @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("riderules")
}

// Articles Model
enum ArticleLanguage {
  EN
  KA
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
}

model ArticleTag {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime? @default(now()) @map("created_at")
  articles  Article[]

  @@map("articles_tags")
}

model Article {
  id        String          @id @default(cuid())
  title     String
  content   String
  heading   String
  language  ArticleLanguage
  picture   String?
  status    ArticleStatus   @default(DRAFT)
  createdAt DateTime?       @default(now()) @map("created_at")
  tags      ArticleTag[]

  @@map("articles")
}

// // Notifications Model
// model Notification {
//   id        String   @id @default(cuid())
//   title     String
//   content   String
//   type      String
//   read      Boolean  @default(false)
//   userId    String   @map("user_id")
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @default(now()) @map("updated_at")
//
//   @@map("notifications")
// }

// Companies Model
model Company {
  id        String        @id @default(cuid())
  name      String
  logo      String?
  address   String?
  phone     String?
  email     String?
  website   String?
  ownerId   String        @map("owner_id")
  owner     User          @relation(fields: [ownerId], references: [id], onDelete: Cascade, name: "owner")
  drivers   User[]        @relation("driver")
  cars      Car[]
  status    CompanyStatus @default(INACTIVE)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @map("updated_at")

  @@map("companies")
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
}
